[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "How to fluently forward Makefile’s targets to a Docker container ?\n\n\n\n\n\n\n\ncli\n\n\nmakefile\n\n\nbash\n\n\ndocker\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\nMar 16, 2023\n\n\nx0s\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A tech blog made with curiosity",
    "section": "",
    "text": "About this blog\nA blog written by a Machine Learning Engineer who enjoys setting the pipes in line with data to deliver value in meaningful projects."
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html",
    "href": "posts/2023-03-16_makefile-wrapper/article.html",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "",
    "text": "We will see how to painlessly redirect makefile’s targets to a docker container keeping the API intuitive.\nWhat you will learn:\n\nHow to automatically read a Makefile’s targets from another Makefile\nHow to wrap Makefile targets to a docker container\nHow to extract and pass Makefile arguments to another Makefile"
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html#introducing-a-use-case",
    "href": "posts/2023-03-16_makefile-wrapper/article.html#introducing-a-use-case",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "Introducing a use case",
    "text": "Introducing a use case\nLet’s say we’ve already built an application using Makefile to run tasks (ie: run tests, build a docker image, launch scripts). As good practice we developed it within an virtual environment (ie: conda) and it worked perfectly… until one day… as the application grew, it had to deal with different versions of python, compiler dependencies… things that a conda environment cannot handle alone. So we decided to wrap your app in a container.\nTo sum up, from being able to do:\n(my_env) $ make test\n(my_env) $ make game WHEN=2022/01-2\nwe also want to be able to do:\n(my_env) $ make_in_container test\n(my_env) $ make_in_container game WHEN=2022/01-2\nWhy choosing make_in_container ?\n\nWe don’t want to duplicate Makefiles nor the targets (DRY)\nWe favour clarity, avoiding mingling arguments, prefering make_in_container test_this DAY=2022/01 to make test_this SKIP_CONTAINER=false DAY=2022/01. Also with this option we would have to manually prefix every command of the original Makefile\nWe also favour extensibility, what if later we want to switch from Docker to Podman ? make_in_container looks better than make_in_docker\n\nTo illustrate this, we will use the git repository I worked on to do the famous Advent Of Code ! So we have this tree structure:\nAdvent-Of-Code\n├── Dockerfile\n├── Makefile\n├── Makefile_docker\n├── advent_of_code/\n├── tests/\n| ...\nThere are two makefiles:\n\na Makefile having the project usual targets (install,build, test …)\na Makefile_docker aiming at forwarding the targets to a docker container.\n\nThe workflow is the following:\n# Install the application following the guidelines\n# - Create conda environment\n# - make install\n# - ...\n\n# Build the docker image\n(my_env) $ make build\n\n# Run some tasks in container\n(my_env) $ make_in_container test_this DAY=2022/01\nOnce the image is built, a user should be able to run any task within the container as soon as the conda environment is active. We’ll see in next sessions how to settle this."
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html#aliasing-make_in_container",
    "href": "posts/2023-03-16_makefile-wrapper/article.html#aliasing-make_in_container",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "Aliasing make_in_container",
    "text": "Aliasing make_in_container\nTo avoid polluting system namespace (sourcing ~/.bashrc), we want to enable the make_in_container command only when working in this project. Enabling it when we activate the conda environment seems the right moment. Let’s configure it at building time:\n\n# from Makefile\nbuild:\n    @docker build --tag aoc-image -f Dockerfile .\n# make \"make_in_container\" command available when conda env is activated\nifdef CONDA_PREFIX\n    @$(eval PATH_ALIAS := ${CONDA_PREFIX}/etc/conda/activate.d/aliases_.sh)\n    @mkdir -p ${CONDA_PREFIX}/etc/conda/activate.d\n    @echo \"#!/bin/bash\" >> $(PATH_ALIAS)\n    @echo \"alias make_in_container='make -f Makefile_docker'\" >> $(PATH_ALIAS)\n    @source $(PATH_ALIAS)\nendif\n\nFirst, we build and image named aoc-image using Dockerfile. Then if a conda environment is active (and it should!), we write a little script this conda env will execute every time it is activated. Therefore make_in_container will redirect to using Makefile_docker as a makefile:\n\n#!/bin/bash\nalias make_in_container='make -f Makefile_docker'\n\nOf course, you can adapt this code to make it work with other environment manager (Virtualenvwrapper hooks for instance)."
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html#how-to-retrieve-all-targets",
    "href": "posts/2023-03-16_makefile-wrapper/article.html#how-to-retrieve-all-targets",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "How to retrieve all targets ?",
    "text": "How to retrieve all targets ?\nHere we want to automatically forward targets to the docker container. First we retrieve the targets from Makefile using a snippet heavily inspired from StackOverflow. We can see the result by invoking make_in_container list-targets.\n\n# from Makefile_docker\n\n# Tag of docker image\nNAME := aoc-image\n\n# Retrieve the AOC targets from main Makefile\n# inspired from https://stackoverflow.com/a/26339924/3581903\nAOC_TARGETS := $(shell LC_ALL=C make -pRrq -f Makefile : 2>/dev/null \\\n        | awk -v RS= -F: '/(^|\\n)\\# Files(\\n|$$)/,/(^|\\n)\\# Finished Make data base/ {if ($$1 !~ \"^[\\#.]\") {print $$1}}' \\\n        | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' \\\n        | xargs | tr -d :)\n\n.PHONY : $(AOC_TARGETS) list_targets\n\n# Forward any AOC_TARGET to the container\n$(AOC_TARGETS):\n    @docker run -it ${NAME} make $@\n\nlist-targets:\n    @echo $(AOC_TARGETS)\n\nWith this setting, calls like make_in_container help or make_in_container test properly forward make help and make test in the container. But what about make_in_container test_this DAY=2022/01 ? For now it only forwards make_in_container test_this. Let’s see how to pass all arguments to the container."
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html#how-to-pass-all-arguments",
    "href": "posts/2023-03-16_makefile-wrapper/article.html#how-to-pass-all-arguments",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "How to pass all arguments ?",
    "text": "How to pass all arguments ?\nAs per the manual, $@ only keeps the target name. Calling make_in_container test_this DAY=2022/01 will set $@ to test_this and DAY to 2022/01. To retrieve the argument, we have to check the environment variables. Here we will store the arguments’ names in AOC_ARGS (it is possible to retrieve it automatically with regexp on the Makefile help, but it would add unecessary complexity here).\nFor each argument, get_args will check if an environment variable is set (like DAY to 2022/01), and when it is, will return the string DAY=2022/01.\n\n# Extract valid arguments and pass them with their value\n# ie: calling \"make_in_container game WHEN=2022/01-1\" will result in passing \"WHEN=2022/01-1\"\nget_args = $(foreach arg,$(AOC_ARGS),$(if $(value $(arg)),$(arg)=$($(arg))))\n\n# Arguments to be passed to targets accordin to main Makefile\nAOC_ARGS = EDIT TOKEN WHEN VERBOSE DAY\n\nTherefore, we update the redirection so it can forward the arguments to the container. make_in_container test_this DAY=2022/01 will be forwarded as make test_this DAY=2022/01.\n\n# Forward any AOC_TARGET to the container   \n# ie: \"make_in_container test VERBOSE=1\" is run as \"make test VERBOSE=1\" in the container\n$(AOC_TARGETS):\n    @docker run -it ${NAME} make $@ $(call get_args)\n\nYou can reach the full source here."
  },
  {
    "objectID": "posts/2023-03-16_makefile-wrapper/article.html#conclusion",
    "href": "posts/2023-03-16_makefile-wrapper/article.html#conclusion",
    "title": "How to fluently forward Makefile’s targets to a Docker container ?",
    "section": "Conclusion",
    "text": "Conclusion\nWe’ve seen how to wrap all makefile targets so they can be forwarded to a container without changing the API: Everything that was runnable with make ... is now also runnable in a container with make_in_container ...."
  }
]